{
    "data" : [
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 1.4 MB\n\n",
        "* installing *source* package ‘pastecs’ ...\n",
        "** package ‘pastecs’ successfully unpacked and MD5 sums checked\n",
        "** R\n",
        "** data\n",
        "** inst\n",
        "** preparing package for lazy loading\n",
        "** help\n",
        "*** installing help indices\n",
        "Warning in file.copy(file.path(R.home(\"doc\"), \"html\", \"R.css\"), outman) :",
        "\n  problem copying /usr/share/doc/R-3.4.1/html/R.css to /usr/local/lib/R/site-library/pastecs/html/R.css: No such file or directory\n",
        "  converting help for package ‘pastecs’\n",
        "    finding HTML links ...",
        " done\n",
        "    AutoD2                                  html  \n    GetUnitText                             html  \n    abund                                   html  \n    bnr                                     html  \n    buysbal                                 html  \n    daystoyears                             html  \n    decaverage                              html  \n    deccensus                               html  \n    decdiff                                 html  \n    decevf                                  html  \n    decloess                           ",
        "     html  \n    decmedian                               html  \n    decreg                                  html  \n    disjoin                                 html  \n    disto                                   html  \n    escouf                                  html  \n    extract                                 html  \n    first                                   html  \n    gleissberg.table                        html  \n    is.tseries                              html  \n    last                                    ",
        "html  \n    local.trend                             html  \n    marbio                                  html  \n    marphy                                  html  \n    match.tol                               html  \n    pennington                              html  \n    pgleissberg                             html  \n    regarea                                 html  \n    regconst                                html  \n    reglin                                  html  \n    regspline                               html  ",
        "\n    regul                                   html  \n    regul.adj                               html  \n    regul.screen                            html  \n    releve                                  html  \n    specs                                   html  \n    stat.desc                               html  \n    stat.pen                                html  \n    stat.slide                              html  \n    trend.test                              html  \n    tsd                                     html  \n    tseries                            ",
        "     html  \n    turnogram                               html  \n    turnpoints                              html  \n    vario                                   html  \n",
        "** building package indices\n",
        "** testing if installed package can be loaded\n",
        "* DONE (pastecs)\n",
        "\n",
        "",
        "The downloaded source packages are in\n\t‘/tmp/RtmpcTBVqC/downloaded_packages’",
        "",
        "\n",
        "> ",
        "missingValues <- function(df) {",
        "+ ",
        "    # are there any missing data",
        "+ ",
        "    bMissing = any(is.na(df))",
        "+ ",
        "    lMissing = list()",
        "+ ",
        "    index = 1",
        "+ ",
        "    if(bMissing) {",
        "+ ",
        "        for (Var in names(df)) {",
        "+ ",
        "            missing <- sum(is.na(df[,Var]))",
        "+ ",
        "            if (missing > 0) {",
        "+ ",
        "                print(c(Var,missing))",
        "+ ",
        "                lMissing[[index]] = c(Var, missing)",
        "+ ",
        "                index = index + 1",
        "+ ",
        "            }",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "    str(lMissing)",
        "+ ",
        "    return(lMissing)",
        "+ ",
        "}",
        "> ",
        "categoricalAnalysis <- function(cats.df) {",
        "+ ",
        "    str(cats.df)",
        "+ ",
        "    names(cats.df)",
        "+ ",
        "    lcat = list()",
        "+ ",
        "    i = 1",
        "+ ",
        "    for (col in names(cats.df)) {",
        "+ ",
        "        col",
        "+ ",
        "        ftab = table(cats.df[,col], useNA=\"ifany\")",
        "+ ",
        "        ptab = prop.table(ftab)",
        "+ ",
        "        lcat[[i]] = c(col, ftab, ptab)",
        "+ ",
        "        i = i + 1",
        "+ ",
        "    }",
        "+ ",
        "    return(lcat)",
        "+ ",
        "}",
        "> ",
        "# I like this approach",
        "> ",
        "printf <- function(...)print(sprintf(...))",
        "> ",
        "printDF <- function(df) df %>% head",
        "> ",
        "",
        "> ",
        "loadData <- function (dataFile) {",
        "+ ",
        "    ",
        "+ ",
        "    if (missing(dataFile))",
        "+ ",
        "        return(NULL)",
        "+ ",
        "    ",
        "+ ",
        "    # Read data in from file, comma deliminated, header is true",
        "+ ",
        "    raw.df = read.csv(file=dataFile, ",
        "+ ",
        "                      header=T, ",
        "+ ",
        "                      sep=',', ",
        "+ ",
        "                      strip.white = T,",
        "+ ",
        "                      colClasses = colClasses,",
        "+ ",
        "                      na.strings=c(\"\", \"NA\", \"?\", \" \"))",
        "+ ",
        "    return(raw.df)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# features is a comma seperated list to query",
        "> ",
        "# featureSet = c(\"StrikeID\", \"T1\", \"Target_T1\")",
        "> ",
        "loadFeatures <- function(df, features) {",
        "+ ",
        "    ",
        "+ ",
        "    if(missing(df) | missing(features))",
        "+ ",
        "        return(NULL)",
        "+ ",
        "    raw.df = df %>% select(features)",
        "+ ",
        "    return(raw.df)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "## see - http://www.mjdenny.com/Text_Processing_In_R.html",
        "> ",
        "## see - https://github.com/matthewjdenny",
        "> ",
        "## still tweaking",
        "> ",
        "Clean_String <- function(string){",
        "+ ",
        "    # Lowercase",
        "+ ",
        "    temp <- tolower(string)",
        "+ ",
        "    ",
        "+ ",
        "    #' Remove everything that is not a number or letter (may want to keep more ",
        "+ ",
        "    #' stuff in your actual analyses). ",
        "+ ",
        "    temp <- stringr::str_replace_all(temp,\"[^a-zA-Z\\\\s]\", \" \")",
        "+ ",
        "    ",
        "+ ",
        "    # Shrink down to just one white space",
        "+ ",
        "    temp <- stringr::str_replace_all(temp,\"[\\\\s]+\", \" \")",
        "+ ",
        "    ",
        "+ ",
        "    # Split it",
        "+ ",
        "    temp <- stringr::str_split(temp, \" \")[[1]]",
        "+ ",
        "    ",
        "+ ",
        "    # Get rid of trailing \"\" if necessary",
        "+ ",
        "    indexes <- which(temp == \"\")",
        "+ ",
        "    if(length(indexes) > 0){",
        "+ ",
        "        temp <- temp[-indexes]",
        "+ ",
        "    } ",
        "+ ",
        "    return(temp)",
        "+ ",
        "}",
        "> ",
        "#' function to clean text",
        "> ",
        "#' typical calling sequence:",
        "> ",
        "#       con <- file(\"Obama_Speech_2-24-09.txt\", \"r\", blocking = FALSE)",
        "> ",
        "#       text <- readLines(con)",
        "> ",
        "#       close(con) ",
        "> ",
        "Clean_Text_Block <- function(text){",
        "+ ",
        "    if(length(text) <= 1){",
        "+ ",
        "        # Check to see if there is any text at all with another conditional",
        "+ ",
        "        if(length(text) == 0){",
        "+ ",
        "            cat(\"There was no text in this document! \\n\")",
        "+ ",
        "            to_return <- list(num_tokens = 0, unique_tokens = 0, text = \"\")",
        "+ ",
        "        }",
        "+ ",
        "        else {",
        "+ ",
        "            # If there is , and only only one line of text then tokenize it",
        "+ ",
        "            clean_text <- Clean_String(text)",
        "+ ",
        "            num_tok <- length(clean_text)",
        "+ ",
        "            num_uniq <- length(unique(clean_text))",
        "+ ",
        "            to_return <- list(num_tokens = num_tok, unique_tokens = num_uniq, text = clean_text)",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "    else {",
        "+ ",
        "        # Get rid of blank lines",
        "+ ",
        "        indexes <- which(text == \"\")",
        "+ ",
        "        if(length(indexes) > 0){",
        "+ ",
        "            text <- text[-indexes]",
        "+ ",
        "        }  ",
        "+ ",
        "        # Loop through the lines in the text and use the append() function to ",
        "+ ",
        "        clean_text <- Clean_String(text[1])",
        "+ ",
        "        for(i in 2:length(text)){",
        "+ ",
        "            # add them to a vector ",
        "+ ",
        "            clean_text <- append(clean_text,Clean_String(text[i]))",
        "+ ",
        "        }",
        "+ ",
        "        # Calculate the number of tokens and unique tokens and return them in a ",
        "+ ",
        "        # named list object.",
        "+ ",
        "        num_tok <- length(clean_text)",
        "+ ",
        "        num_uniq <- length(unique(clean_text))",
        "+ ",
        "        to_return <- list(num_tokens = num_tok, unique_tokens = num_uniq, text = clean_text)",
        "+ ",
        "    }",
        "+ ",
        "    return(to_return)",
        "+ ",
        "}",
        "> ",
        "parseMetricTokens <- function(field)",
        "+ ",
        "{",
        "+ ",
        "    # works very well...",
        "+ ",
        "    split.pos <- gregexpr('\\\\(.*?)', field)[[1]]",
        "+ ",
        "    split.length <- attr(split.pos, \"match.length\")",
        "+ ",
        "    split.start <- sort(c(1, split.pos, split.pos+split.length))",
        "+ ",
        "    split.end <- c(split.start[-1]-1, nchar(field))",
        "+ ",
        "    split.results = substring(field,split.start,split.end)",
        "+ ",
        "    split.results",
        "+ ",
        "    index = 1;",
        "+ ",
        "    tokenList = list()",
        "+ ",
        "    # not quite: all <- unlist(strsplit(x, \"\\\\s+\"))",
        "+ ",
        "    # not quite: y = unlist(strsplit(x, ')'))",
        "+ ",
        "    # closer: regmatches(x, gregexpr(\"(?=\\\\().*?(?<=\\\\))\", x, perl=T))[[1]]",
        "+ ",
        "    pat <- \"(?<=\\\\()([^()]*)(?=\\\\))\"",
        "+ ",
        "    for (i in split.results) {",
        "+ ",
        "        if (nchar(i) > 1) {",
        "+ ",
        "            element = i",
        "+ ",
        "            pos <- gregexpr('\\\\(.*?)', element)[[1]]",
        "+ ",
        "            if (pos > 0)",
        "+ ",
        "                element = regmatches(element, gregexpr(pat, element, perl=TRUE))",
        "+ ",
        "            element2 = str_trim(element)",
        "+ ",
        "            #printf(\"element: %s, element2: %s, length: %d\", element, element2, nchar(element))",
        "+ ",
        "            tokenList[index] = element2",
        "+ ",
        "            index = index + 1",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "    printf(\"index: %d\", index)",
        "+ ",
        "    if(index == 2)",
        "+ ",
        "        # if there  is no numeric value (x), assume 1.",
        "+ ",
        "        tokenList[index] = \"1\"",
        "+ ",
        "    tokenList",
        "+ ",
        "    df = as.data.frame(tokenList)",
        "+ ",
        "    names(df) = c(\"level\", \"count\")",
        "+ ",
        "    return(df)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# DOES NOT WORK - NOT Supported DPLYR",
        "> ",
        "#  need to investyigate purr or base::aggregate",
        "> ",
        "# sets - critical notes",
        "> ",
        "#   1) order is important...",
        "> ",
        "#       a) StrikeID MUST BE FIRST (this is the FK back to target table)",
        "> ",
        "#       b) METRIC must be second - this is because we reference columns by index",
        "> ",
        "#       c) example: meaSet = c(\"StrikeID\", \"MEA\")",
        "> ",
        "#   2) the dataframe to query against",
        "> ",
        "parseMetric <- function(metricSet, df)",
        "+ ",
        "{",
        "+ ",
        "    # no attrbute specification, no deal.",
        "+ ",
        "    if(missing(metricSet) | missing(df))",
        "+ ",
        "        return(NULL) ",
        "+ ",
        "    ",
        "+ ",
        "    # easy change",
        "+ ",
        "    groupBy = 1",
        "+ ",
        "    metric = 2",
        "+ ",
        "    ",
        "+ ",
        "    # ok, have at it",
        "+ ",
        "    metric.df = na.omit(loadFeatures(df, metricSet))",
        "+ ",
        "",
        "+ ",
        "    # parse out the single line, multiple token input",
        "+ ",
        "    metric2.df = metric.df %>% rowwise() %>% mutate(level=parseMetricTokens(.[[2]])$level)",
        "+ ",
        "    metric3.df = metric2.df %>% rowwise() %>% mutate(count=parseMetricTokens(.[[2]])$count)",
        "+ ",
        "    metric4.df = metric3.df %>% mutate_at(vars(matches(\"count\")),funs(as.numeric))",
        "+ ",
        "    rm(metric.df, metric2.df, metric3.df)",
        "+ ",
        "    return(metric3.df)",
        "+ ",
        "}",
        "> ",
        "# Constants to our mainline",
        "> ",
        "#",
        "> ",
        "rawDataFile = \"Targeting Data Analytics v4a.csv\";",
        "> ",
        "dataFile = paste0( projectDataSet, rawDataFile ); ",
        "> ",
        "",
        "> ",
        "######################################################################",
        "> ",
        "# Begin",
        "> ",
        "######################################################################",
        "> ",
        "# load the data (web or local)",
        "> ",
        "raw.df = loadData(dataFile)",
        "> ",
        "dim(raw.df)",
        "[1]  8 37\n",
        "> ",
        "str(raw.df)",
        "'data.frame':\t8 obs. of  37 variables:\n $ StrikeID       : int  45917 45917 45918 45918 45919 45919 45919 45920\n $ Classification : Factor w/ 2 levels \"FVEY\",\"IRKS\": 1 1 1 1 1 1 1 2\n $ Country        : chr  \"US\" \"US\" \"US\" \"US\" ...\n $ DTG            : chr  \"06063300ZJUN11\" \"06063300ZJUN11\" \"06063301ZJUN11\" \"06063301ZJUN11\" ...\n $ Date           : chr  \"6-Jun-11\" \"6-Jun-11\" \"6-Jun-11\" \"6-Jun-11\" ...\n $ Time           : chr  \"0633Z\" \"0633Z\" \"0633Z\" \"0633Z\" ...\n $ ATO            : chr  \"AA\" \"AA\" \"AA\" \"AA\" ...\n ",
        "$ EngageUnit     : chr  \"AW-17\" \"AW-17\" \"AW-17\" \"AW-17\" ...\n $ DEL.DYN        : Factor w/ 2 levels \"Deliberate\",\"Dynamic\": 1 1 2 2 1 1 1 2\n $ EntityID       : chr  \"0000-00001\" \"0000-00001\" NA NA ...\n $ O.Suffix       : Factor w/ 4 levels \"AA000\",\"AA001\",..: 1 1 2 2 3 3 3 4\n $ CatCode        : num  50201 50201 60101 60101 50201 ...\n $ EntityName     : chr  \"Loon Mountain\" \"Loon Mountain\" \"Loon Mountain\" \"Loon Mountain\" ...\n $ City           : chr  \"Lincoln\" \"Lincoln\" \"Lincoln\" \"Lincoln\" ...\n $ Province       ",
        ": chr  \"Grafton\" \"Grafton\" \"Grafton\" \"Grafton\" ...\n $ ROE            : chr  \"111\" \"111\" \"111\" \"111\" ...\n $ Target.Function: chr  \"HOUSING\" \"HOUSING\" \"COMMAND/CONTROL\" \"COMMAND/CONTROL\" ...\n $ T1             : int  2 1 1 NA 3 NA NA 1\n $ Target_T1      : chr  \"BARACKS\" \"HOTEL\" \"CP\" NA ...\n $ Lat            : num  44 44 44 44 44.5 ...\n $ Long           : num  -71.6 -71.6 -71.6 -71.6 -70.9 ...\n $ MGRS           : chr  \"????\" \"????\" \"????\" \"????\" ...\n $ Observer       : chr  \"LTQK76\" NA \"LTQK76\" NA ...\n $ Aircraft       ",
        ": chr  \"AC-130\" \"A-10\" \"F16\" NA ...\n $ Callsign       : chr  \"goose\" \"slider\" \"iceman\" NA ...\n $ ACBase         : chr  \"Bristol AFB\" \"Bristol AFB\" \"Bristol AFB\" NA ...\n $ Nationality    : chr  \"US\" \"US\" \"US\" NA ...\n $ ORD1           : int  1 1 5 1 1 5 5 5\n $ Ordinance_1    : chr  \"105mm M102\" \"GAU-8\" \"GBU31\" \"M61-A1\" ...\n $ TargetsRemark  : chr  \"Comment\" NA \"Comment\" NA ...\n $ Physical       : chr  \"none(1)\" \"destroyed(2)\" \"destroyed\" NA ...\n $ Confidence     : chr  \"possible(1)\" \"confident(2)\" \"confident\" NA",
        " ...\n $ Functional     : chr  \"confident(2) destroyed\" \"possible none(1)\" \"confident destroyed\" NA ...\n $ RecupeTime     : chr  NA NA NA NA ...\n $ MEA            : chr  \"no high order impact(1)\" NA NA NA ...\n $ CDA            : chr  NA NA \"building(3)\" NA ...\n $ MISREP         : chr  NA NA NA NA ...\n",
        "> ",
        "names(raw.df)",
        " [1] \"StrikeID\"        \"Classification\"  \"Country\"         \"DTG\"            \n [5] \"Date\"            \"Time\"            \"ATO\"             \"EngageUnit\"     \n [9] \"DEL.DYN\"         \"EntityID\"        \"O.Suffix\"        \"CatCode\"        \n[13] \"EntityName\"      \"City\"            \"Province\"        \"ROE\"            \n[17] \"Target.Function\" \"T1\"              \"Target_T1\"       \"Lat\"            \n[21] \"Long\"            \"MGRS\"            \"Observer\"        \"Aircraft\"       \n[25] \"Callsign\"        \"ACBase\"          \"Nationality\"    ",
        " \"ORD1\"           \n[29] \"Ordinance_1\"     \"TargetsRemark\"   \"Physical\"        \"Confidence\"     \n[33] \"Functional\"      \"RecupeTime\"      \"MEA\"             \"CDA\"            \n[37] \"MISREP\"         \n",
        "> ",
        "head(raw.df)",
        "  StrikeID Classification Country            DTG     Date  Time ATO\n1    45917           FVEY      US 06063300ZJUN11 6-Jun-11 0633Z  AA\n2    45917           FVEY      US 06063300ZJUN11 6-Jun-11 0633Z  AA\n3    45918           FVEY      US 06063301ZJUN11 6-Jun-11 0633Z  AA\n4    45918           FVEY      US 06063301ZJUN11 6-Jun-11 0633Z  AA\n5    45919           FVEY      US 07073300ZJUN11 7-Jun-11 0733Z  AB\n6    45919           FVEY      US 07073300ZJUN11 7-Jun-11 0733Z  AB\n  EngageUnit    DEL.DYN   EntityID O.Suffix",
        " CatCode    EntityName    City\n1      AW-17 Deliberate 0000-00001    AA000   50201 Loon Mountain Lincoln\n2      AW-17 Deliberate 0000-00001    AA000   50201 Loon Mountain Lincoln\n3      AW-17    Dynamic       <NA>    AA001   60101 Loon Mountain Lincoln\n4      AW-17    Dynamic       <NA>    AA001   60101 Loon Mountain Lincoln\n5      AW-18 Deliberate 0000-00002    AA002   50201  Sunday River   Newry\n6      AW-18 Deliberate 0000-00002    AA002   50201  Sunday River   Newry\n  Province ROE Target.Function T1 Target_T1",
        "    Lat     Long MGRS Observer\n1  Grafton 111         HOUSING  2   BARACKS 44.036 -71.6214 ????   LTQK76\n2  Grafton 111         HOUSING  1     HOTEL 44.036 -71.6214 ????     <NA>\n3  Grafton 111 COMMAND/CONTROL  1        CP 44.036 -71.6214 ????   LTQK76\n4  Grafton 111 COMMAND/CONTROL NA      <NA> 44.036 -71.6214 ????     <NA>\n5   Oxford 111         HOUSING  3   BARACKS 44.469 -70.8610 ????   LTQK76\n6   Oxford 111         HOUSING NA      <NA> 44.469 -70.8610 ????     <NA>\n  Aircraft  Callsign      ACBase Nationality",
        " ORD1 Ordinance_1 TargetsRemark\n1   AC-130     goose Bristol AFB          US    1  105mm M102       Comment\n2     A-10    slider Bristol AFB          US    1       GAU-8          <NA>\n3      F16    iceman Bristol AFB          US    5       GBU31       Comment\n4     <NA>      <NA>        <NA>        <NA>    1      M61-A1          <NA>\n5   AC-130     goose Bristol AFB          US    1  105mm M102       Comment\n6    F-15E hollywood Bristol AFB          US    5       GBU31          <NA>\n          Physical   Confidence",
        "                Functional RecupeTime\n1          none(1)  possible(1)    confident(2) destroyed       <NA>\n2     destroyed(2) confident(2)          possible none(1)       <NA>\n3        destroyed    confident       confident destroyed       <NA>\n4             <NA>         <NA>                      <NA>       <NA>\n5  light damage(1)  probable(1)  probable light damage(1)       <NA>\n6 heavy damage (2)  possible(2) possible heavy damage (2)       <NA>\n                      MEA         CDA MISREP\n1 no high order impact(1)",
        "        <NA>   <NA>\n2                    <NA>        <NA>   <NA>\n3                    <NA> building(3)   <NA>\n4                    <NA>        <NA>   <NA>\n5        missed target(5)        <NA>   <NA>\n6                    <NA>        <NA>   <NA>\n",
        "> ",
        "",
        "> ",
        "# have a useable start to importing the data\\",
        "> ",
        "# 1) missing data... (actually looks pretty good)",
        "> ",
        "missing = missingValues(raw.df)",
        "[1] \"EntityID\" \"3\"       \n[1] \"T1\" \"3\" \n[1] \"Target_T1\" \"3\"        \n[1] \"Observer\" \"4\"       \n[1] \"Aircraft\" \"1\"       \n[1] \"Callsign\" \"1\"       \n[1] \"ACBase\" \"1\"     \n[1] \"Nationality\" \"1\"          \n[1] \"TargetsRemark\" \"4\"            \n[1] \"Physical\" \"2\"       \n[1] \"Confidence\" \"2\"         \n[1] \"Functional\" \"2\"         \n[1] \"RecupeTime\" \"8\"         \n[1] \"MEA\" \"6\"  \n[1] \"CDA\" \"6\"  \n[1] \"MISREP\" \"8\"     \nList of 16\n $ : chr [1:2] \"EntityID\" \"3\"\n $ : chr [1:2] \"T1\" \"3\"\n $ : chr [1:2] \"Target_T1\" \"3\"\n $ : chr [1:2] ",
        "\"Observer\" \"4\"\n $ : chr [1:2] \"Aircraft\" \"1\"\n $ : chr [1:2] \"Callsign\" \"1\"\n $ : chr [1:2] \"ACBase\" \"1\"\n $ : chr [1:2] \"Nationality\" \"1\"\n $ : chr [1:2] \"TargetsRemark\" \"4\"\n $ : chr [1:2] \"Physical\" \"2\"\n $ : chr [1:2] \"Confidence\" \"2\"\n $ : chr [1:2] \"Functional\" \"2\"\n $ : chr [1:2] \"RecupeTime\" \"8\"\n $ : chr [1:2] \"MEA\" \"6\"\n $ : chr [1:2] \"CDA\" \"6\"\n $ : chr [1:2] \"MISREP\" \"8\"\n",
        "> ",
        "missing",
        "[[1]]\n[1] \"EntityID\" \"3\"       \n\n[[2]]\n[1] \"T1\" \"3\" \n\n[[3]]\n[1] \"Target_T1\" \"3\"        \n\n[[4]]\n[1] \"Observer\" \"4\"       \n\n[[5]]\n[1] \"Aircraft\" \"1\"       \n\n[[6]]\n[1] \"Callsign\" \"1\"       \n\n[[7]]\n[1] \"ACBase\" \"1\"     \n\n[[8]]\n[1] \"Nationality\" \"1\"          \n\n[[9]]\n[1] \"TargetsRemark\" \"4\"            \n\n[[10]]\n[1] \"Physical\" \"2\"       \n\n[[11]]\n[1] \"Confidence\" \"2\"         \n\n[[12]]\n[1] \"Functional\" \"2\"         \n\n[[13]]\n[1] \"RecupeTime\" \"8\"         \n\n[[14]]\n[1] \"MEA\" \"6\"  \n\n[[15]]\n[1] \"CDA\" \"6\"  \n\n[[16]]\n[1] \"MISREP\"",
        " \"8\"     \n\n",
        "> ",
        "",
        "> ",
        "# 2) work to correct improperly parsed feature types",
        "> ",
        "# might be easier to turn off strings as factors, then change the factor features?",
        "> ",
        "raw.df$DTG <- str_replace_all(as.character(raw.df$DTG), \"Z\", \"\")",
        "> ",
        "raw.df$DTG <- parse_date_time(raw.df$DTG, orders=\"dHMSby\")",
        "> ",
        "raw.df$Date <- paste(day(raw.df$DTG), month(raw.df$DTG, label=T), year(raw.df$DTG), sep=\"-\")",
        "Error in month(raw.df$DTG, label = T) : unused argument (label = T)\n",
        "> ",
        "raw.df$Time <- paste(hour(raw.df$DTG), minute(raw.df$DTG), sep = \":\")",
        "> ",
        "head(raw.df)",
        "  StrikeID Classification Country                 DTG     Date Time ATO\n1    45917           FVEY      US 2011-06-06 06:33:00 6-Jun-11 6:33  AA\n2    45917           FVEY      US 2011-06-06 06:33:00 6-Jun-11 6:33  AA\n3    45918           FVEY      US 2011-06-06 06:33:01 6-Jun-11 6:33  AA\n4    45918           FVEY      US 2011-06-06 06:33:01 6-Jun-11 6:33  AA\n5    45919           FVEY      US 2011-06-07 07:33:00 7-Jun-11 7:33  AB\n6    45919           FVEY      US 2011-06-07 07:33:00 7-Jun-11 7:33  AB\n  EngageUnit",
        "    DEL.DYN   EntityID O.Suffix CatCode    EntityName    City\n1      AW-17 Deliberate 0000-00001    AA000   50201 Loon Mountain Lincoln\n2      AW-17 Deliberate 0000-00001    AA000   50201 Loon Mountain Lincoln\n3      AW-17    Dynamic       <NA>    AA001   60101 Loon Mountain Lincoln\n4      AW-17    Dynamic       <NA>    AA001   60101 Loon Mountain Lincoln\n5      AW-18 Deliberate 0000-00002    AA002   50201  Sunday River   Newry\n6      AW-18 Deliberate 0000-00002    AA002   50201  Sunday River   Newry\n  Province",
        " ROE Target.Function T1 Target_T1    Lat     Long MGRS Observer\n1  Grafton 111         HOUSING  2   BARACKS 44.036 -71.6214 ????   LTQK76\n2  Grafton 111         HOUSING  1     HOTEL 44.036 -71.6214 ????     <NA>\n3  Grafton 111 COMMAND/CONTROL  1        CP 44.036 -71.6214 ????   LTQK76\n4  Grafton 111 COMMAND/CONTROL NA      <NA> 44.036 -71.6214 ????     <NA>\n5   Oxford 111         HOUSING  3   BARACKS 44.469 -70.8610 ????   LTQK76\n6   Oxford 111         HOUSING NA      <NA> 44.469 -70.8610 ????     <NA>\n  Aircraft",
        "  Callsign      ACBase Nationality ORD1 Ordinance_1 TargetsRemark\n1   AC-130     goose Bristol AFB          US    1  105mm M102       Comment\n2     A-10    slider Bristol AFB          US    1       GAU-8          <NA>\n3      F16    iceman Bristol AFB          US    5       GBU31       Comment\n4     <NA>      <NA>        <NA>        <NA>    1      M61-A1          <NA>\n5   AC-130     goose Bristol AFB          US    1  105mm M102       Comment\n6    F-15E hollywood Bristol AFB          US    5       GBU31          <NA>",
        "\n          Physical   Confidence                Functional RecupeTime\n1          none(1)  possible(1)    confident(2) destroyed       <NA>\n2     destroyed(2) confident(2)          possible none(1)       <NA>\n3        destroyed    confident       confident destroyed       <NA>\n4             <NA>         <NA>                      <NA>       <NA>\n5  light damage(1)  probable(1)  probable light damage(1)       <NA>\n6 heavy damage (2)  possible(2) possible heavy damage (2)       <NA>\n                      MEA         CDA",
        " MISREP\n1 no high order impact(1)        <NA>   <NA>\n2                    <NA>        <NA>   <NA>\n3                    <NA> building(3)   <NA>\n4                    <NA>        <NA>   <NA>\n5        missed target(5)        <NA>   <NA>\n6                    <NA>        <NA>   <NA>\n",
        "> ",
        "",
        "> ",
        "# have a loom at the categorical variable",
        "> ",
        "cats_pos = c(2, 9)",
        "> ",
        "cats.df = raw.df[, cats_pos]",
        "> ",
        "lcat = categoricalAnalysis(cats.df)",
        "'data.frame':\t8 obs. of  2 variables:\n $ Classification: Factor w/ 2 levels \"FVEY\",\"IRKS\": 1 1 1 1 1 1 1 2\n $ DEL.DYN       : Factor w/ 2 levels \"Deliberate\",\"Dynamic\": 1 1 2 2 1 1 1 2\n",
        "> ",
        "lcat",
        "[[1]]\n                             FVEY             IRKS             FVEY \n\"Classification\"              \"7\"              \"1\"          \"0.875\" \n            IRKS \n         \"0.125\" \n\n[[2]]\n           Deliberate    Dynamic Deliberate    Dynamic \n \"DEL.DYN\"        \"5\"        \"3\"    \"0.625\"    \"0.375\" \n\n",
        "> ",
        "",
        "> ",
        "#numerical analysis - summary statistics (none)",
        "> ",
        "#stat.desc(raw.df)",
        "> ",
        "",
        "> ",
        "# some elements are repeating, split them off into there own list ",
        "> ",
        "# (reference strike id).  Focus areas:",
        "> ",
        "# 1) critical elements (detailed target)",
        "> ",
        "targetDetailSet = c(\"StrikeID\", \"T1\", \"Target_T1\")",
        "> ",
        "td.df = na.omit(loadFeatures(raw.df, targetDetailSet))",
        "> ",
        "",
        "> ",
        "# get total tagets by strikeid",
        "> ",
        "td.df %>% group_by(StrikeID, Target_T1) %>% summarise(totTargets = sum(T1)) %>% head",
        "# A tibble: 5 x 3\n# Groups:   StrikeID [4]\n  StrikeID Target_T1 totTargets\n     <int>     <chr>      <int>\n1    45917   BARACKS          2\n2    45917     HOTEL          1\n3    45918        CP          1\n4    45919   BARACKS          3\n5    45920        CP          1\n",
        "> ",
        "",
        "> ",
        "# 2) Aircraft",
        "> ",
        "aircraftSet = c(\"StrikeID\", \"Aircraft\", \"Callsign\", \"ACBase\", \"Nationality\")",
        "> ",
        "ac.df = na.omit(loadFeatures(raw.df, aircraftSet))",
        "> ",
        "ac.df %>% group_by(StrikeID, Aircraft) %>% head",
        "# A tibble: 6 x 5\n# Groups:   StrikeID, Aircraft [6]\n  StrikeID Aircraft  Callsign      ACBase Nationality\n     <int>    <chr>     <chr>       <chr>       <chr>\n1    45917   AC-130     goose Bristol AFB          US\n2    45917     A-10    slider Bristol AFB          US\n3    45918      F16    iceman Bristol AFB          US\n4    45919   AC-130     goose Bristol AFB          US\n5    45919    F-15E hollywood Bristol AFB          US\n6    45919     B-52  maverick  Brooks AFB          CA\n",
        "> ",
        "ac.df %>% group_by(StrikeID) %>% summarize(AC = paste(Aircraft, collapse=\",\"), total=n()) %>% head",
        "# A tibble: 4 x 3\n  StrikeID                AC total\n     <int>             <chr> <int>\n1    45917       AC-130,A-10     2\n2    45918               F16     1\n3    45919 AC-130,F-15E,B-52     3\n4    45920               F16     1\n",
        "> ",
        "",
        "> ",
        "# 3) Ordinance",
        "> ",
        "ordSet = c(\"StrikeID\", \"ORD1\", \"Ordinance_1\")",
        "> ",
        "ord.df = na.omit(loadFeatures(raw.df, ordSet))",
        "> ",
        "ord.df %>% group_by(StrikeID) %>% head",
        "# A tibble: 6 x 3\n# Groups:   StrikeID [3]\n  StrikeID  ORD1 Ordinance_1\n     <int> <int>       <chr>\n1    45917     1  105mm M102\n2    45917     1       GAU-8\n3    45918     5       GBU31\n4    45918     1      M61-A1\n5    45919     1  105mm M102\n6    45919     5       GBU31\n",
        "> ",
        "ord.df %>% group_by(StrikeID) %>% summarize(Ordinance = paste(Ordinance_1, collapse=\",\")) %>% head",
        "# A tibble: 4 x 2\n  StrikeID             Ordinance\n     <int>                 <chr>\n1    45917      105mm M102,GAU-8\n2    45918          GBU31,M61-A1\n3    45919 105mm M102,GBU31,MK85\n4    45920                 GBU31\n",
        "> ",
        "ord.df %>% group_by(StrikeID) %>% summarize(totalOrd=sum(ORD1), Ordinance = paste(Ordinance_1, collapse=\",\")) %>% head",
        "# A tibble: 4 x 3\n  StrikeID totalOrd             Ordinance\n     <int>    <int>                 <chr>\n1    45917        2      105mm M102,GAU-8\n2    45918        6          GBU31,M61-A1\n3    45919       11 105mm M102,GBU31,MK85\n4    45920        5                 GBU31\n",
        "> ",
        "",
        "> ",
        "# 4) Physical, Confidence, Functional",
        "> ",
        "# Physical",
        "> ",
        "# these are a tad bit trickier..  ",
        "> ",
        "Set = c(\"StrikeID\", \"Physical\")",
        "> ",
        "df = na.omit(loadFeatures(raw.df, Set))",
        "> ",
        "## see https://stackoverflow.com/questions/26003574/r-dplyr-mutate-use-dynamic-variable-names",
        "> ",
        "varLev <- paste(Set[2], \"level\", sep=\".\")",
        "> ",
        "varCnt <- paste(Set[2], \"count\", sep=\".\")",
        "> ",
        "",
        "> ",
        "#immutable calls, therefore record intermediates and delete upon finaly assembly",
        "> ",
        "# parseMetricTokens gets the col value (passed a litteral)",
        "> ",
        "df.2 = df %>% rowwise() %>% mutate(!!varLev := parseMetricTokens(Physical)$level)",
        "[1] \"index: 3\"\n[1] \"index: 3\"\n[1] \"index: 2\"\n[1] \"index: 3\"\n[1] \"index: 3\"\n[1] \"index: 3\"\n",
        "Warning messages:\n",
        "1: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " Unequal factor levels: coercing to character\n",
        "2: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "3: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "4: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "5: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "6: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "7: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "> ",
        "df.3 = df.2 %>% rowwise() %>% mutate(!!varCnt := parseMetricTokens(Physical)$count)",
        "[1] \"index: 3\"\n[1] \"index: 3\"\n[1] \"index: 2\"\n[1] \"index: 3\"\n[1] \"index: 3\"\n[1] \"index: 3\"\n",
        "Warning messages:\n",
        "1: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " Unequal factor levels: coercing to character\n",
        "2: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "3: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "4: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "5: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "6: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "7: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "> ",
        "phy.df = df.3 %>% mutate_at(vars(matches(\"count\")),funs(as.numeric))",
        "> ",
        "#phy.df %>% group_by(StrikeID) %>% head",
        "> ",
        "rm(df, df.2, df.3)",
        "> ",
        "printDF(phy.df)",
        "# A tibble: 6 x 4\n  StrikeID         Physical Physical.level Physical.count\n     <int>            <chr>          <chr>          <dbl>\n1    45917          none(1)           none              1\n2    45917     destroyed(2)      destroyed              2\n3    45918        destroyed      destroyed              1\n4    45919  light damage(1)   light damage              1\n5    45919 heavy damage (2)   heavy damage              2\n6    45920     destroyed(1)      destroyed              1\n",
        "> ",
        "",
        "> ",
        "# have a loom at the categorical variable",
        "> ",
        "Cats = c(3)",
        "> ",
        "Cats.df = phy.df[, Cats]",
        "> ",
        "phyCatsTab = categoricalAnalysis(Cats.df)",
        "Classes ‘tbl_df’, ‘tbl’ and 'data.frame':\t6 obs. of  1 variable:\n $ Physical.level: chr  \"none\" \"destroyed\" \"destroyed\" \"light damage\" ...\n",
        "> ",
        "phyCatsTab",
        "[[1]]\n                              destroyed        heavy damage \n   \"Physical.level\"                 \"3\"                 \"1\" \n       light damage                none           destroyed \n                \"1\"                 \"1\"               \"0.5\" \n       heavy damage        light damage                none \n\"0.166666666666667\" \"0.166666666666667\" \"0.166666666666667\" \n\n",
        "> ",
        "rm(Cats.df)",
        "> ",
        "",
        "> ",
        "# possible spelling matches on destroyed - there are a lot of inconsistencies.",
        "> ",
        "# eventually will need a better mechanism in parseMetricTokens (see strsplit with regex?)",
        "> ",
        "##############################",
        "> ",
        "## broken...  need a better way",
        "> ",
        "# phy.df %>% group_by(StrikeID) %>% filter_(grepl(destroyedRegEx, vars(matches(\"level\"))))",
        "> ",
        "# phy.df %>% group_by(StrikeID) %>% filter_(grepl(destroyedRegEx, [,3]))",
        "> ",
        "# for now, hardcode ass required",
        "> ",
        "destroyedRegExKeyWords = c(\"des\", \"troy\")",
        "> ",
        "destroyedRegEx = paste(destroyedRegExKeyWords, collapse = \"|\")",
        "> ",
        "phy.df %>% group_by(StrikeID) %>% filter(grepl(destroyedRegEx, Physical.level)) %>% summarize(total=sum(Physical.count)) %>% head",
        "# A tibble: 3 x 2\n  StrikeID total\n     <int> <dbl>\n1    45917     2\n2    45918     1\n3    45920     1\n",
        "Warning message:\n",
        "Grouping rowwise data frame strips rowwise nature \n",
        "> ",
        "phy.df %>% group_by(StrikeID) %>% filter(str_detect(Physical.level, destroyedRegEx)) %>% summarize(total=sum(Physical.count)) %>% head",
        "# A tibble: 3 x 2\n  StrikeID total\n     <int> <dbl>\n1    45917     2\n2    45918     1\n3    45920     1\n",
        "Warning message:\n",
        "Grouping rowwise data frame strips rowwise nature \n",
        "> ",
        "",
        "> ",
        "# Confidence",
        "> ",
        "Set = c(\"StrikeID\", \"Confidence\")",
        "> ",
        "df = na.omit(loadFeatures(raw.df, Set))",
        "> ",
        "## see https://stackoverflow.com/questions/26003574/r-dplyr-mutate-use-dynamic-variable-names",
        "> ",
        "varLev <- paste(Set[2], \"level\", sep=\".\")",
        "> ",
        "varCnt <- paste(Set[2], \"count\", sep=\".\")",
        "> ",
        "",
        "> ",
        "# parse out the single line, multiple token input",
        "> ",
        "df.2 = df %>% rowwise() %>% mutate(!!varLev := parseMetricTokens(Confidence)$level)",
        "[1] \"index: 3\"\n[1] \"index: 3\"\n[1] \"index: 2\"\n[1] \"index: 3\"\n[1] \"index: 3\"\n[1] \"index: 2\"\n",
        "Warning messages:\n",
        "1: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " Unequal factor levels: coercing to character\n",
        "2: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "3: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "4: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "5: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "6: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "7: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "> ",
        "df.3 = df.2 %>% rowwise() %>% mutate(!!varCnt := parseMetricTokens(Confidence)$count)",
        "[1] \"index: 3\"\n[1] \"index: 3\"\n[1] \"index: 2\"\n[1] \"index: 3\"\n[1] \"index: 3\"\n[1] \"index: 2\"\n",
        "Warning messages:\n",
        "1: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " Unequal factor levels: coercing to character\n",
        "2: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "3: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "4: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "5: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "6: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "7: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "> ",
        "conf.df = df.3 %>% mutate_at(vars(matches(\"count\")),funs(as.numeric))",
        "> ",
        "rm(df, df.2, df.3)",
        "> ",
        "printDF(conf.df)",
        "# A tibble: 6 x 4\n  StrikeID   Confidence Confidence.level Confidence.count\n     <int>        <chr>            <chr>            <dbl>\n1    45917  possible(1)         possible                1\n2    45917 confident(2)        confident                2\n3    45918    confident        confident                1\n4    45919  probable(1)         probable                1\n5    45919  possible(2)         possible                2\n6    45920    confident        confident                1\n",
        "> ",
        "",
        "> ",
        "# have a loom at the categorical variable",
        "> ",
        "Cats.df = conf.df[, Cats]",
        "> ",
        "confCatsTab = categoricalAnalysis(Cats.df)",
        "Classes ‘tbl_df’, ‘tbl’ and 'data.frame':\t6 obs. of  1 variable:\n $ Confidence.level: chr  \"possible\" \"confident\" \"confident\" \"probable\" ...\n",
        "> ",
        "rm(Cats.df)",
        "> ",
        "",
        "> ",
        "# Functional - join of physical and confidence...",
        "> ",
        "# just display for now...  will require a new parse algorithm",
        "> ",
        "funSet = c(\"StrikeID\", \"Functional\")",
        "> ",
        "fun.df = na.omit(loadFeatures(raw.df, funSet))",
        "> ",
        "",
        "> ",
        "# 5) MEA, CDA",
        "> ",
        "# MEA",
        "> ",
        "# sets - critical notes",
        "> ",
        "#   1) order is important...",
        "> ",
        "#       a) StrikeID MUST BE FIRST (this is the FK back to target table)",
        "> ",
        "#       b) METRIC must be second - this is because we reference columns by index",
        "> ",
        "Set = c(\"StrikeID\", \"MEA\")",
        "> ",
        "df = na.omit(loadFeatures(raw.df, Set))",
        "> ",
        "",
        "> ",
        "## see https://stackoverflow.com/questions/26003574/r-dplyr-mutate-use-dynamic-variable-names",
        "> ",
        "varLev <- paste(Set[2], \"level\", sep=\".\")",
        "> ",
        "varCnt <- paste(Set[2], \"count\", sep=\".\")",
        "> ",
        "",
        "> ",
        "# parse out the single line, multiple token input",
        "> ",
        "# note parameter to parseMetricTokens is the column name,  When called this is actually the value",
        "> ",
        "df.2 = df %>% rowwise() %>% mutate(!!varLev := parseMetricTokens(MEA)$level)",
        "[1] \"index: 3\"\n[1] \"index: 3\"\n",
        "Warning messages:\n",
        "1: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " Unequal factor levels: coercing to character\n",
        "2: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "3: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "> ",
        "df.3 = df.2 %>% rowwise() %>% mutate(!!varCnt := parseMetricTokens(MEA)$count)",
        "[1] \"index: 3\"\n[1] \"index: 3\"\n",
        "Warning messages:\n",
        "1: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " Unequal factor levels: coercing to character\n",
        "2: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "3: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "> ",
        "mea.df = df.3 %>% mutate_at(vars(matches(\"count\")),funs(as.numeric))",
        "> ",
        "rm(df, df.2, df.3)",
        "> ",
        "printDF(mea.df)",
        "# A tibble: 2 x 4\n  StrikeID                     MEA            MEA.level MEA.count\n     <int>                   <chr>                <chr>     <dbl>\n1    45917 no high order impact(1) no high order impact         1\n2    45919        missed target(5)        missed target         5\n",
        "> ",
        "",
        "> ",
        "#### info - trying to use dplky by  col index (to parameteriz) is not working",
        "> ",
        "####  mutate thinks varname is a literal variable name (not a variable)... ",
        "> ",
        "### tricky to build named variable",
        "> ",
        "## using purrr to get some stats",
        "> ",
        "#mea4.df %>% split(.[[3]]) %>% map_dbl(function(x) sum(x[ ,4], na.rm = TRUE))",
        "> ",
        "##  using aggregate (does not work with column index)",
        "> ",
        "#aggregate(mea4.df[ ,4] ~ level, data = mea4.df, sum)",
        "> ",
        "# does work by name",
        "> ",
        "#aggregate(count ~ level, data = mea4.df, sum)",
        "> ",
        "",
        "> ",
        "# CDA",
        "> ",
        "Set = c(\"StrikeID\", \"CDA\")",
        "> ",
        "df = na.omit(loadFeatures(raw.df, Set))",
        "> ",
        "",
        "> ",
        "## see https://stackoverflow.com/questions/26003574/r-dplyr-mutate-use-dynamic-variable-names",
        "> ",
        "varLev <- paste(Set[2], \"level\", sep=\".\")",
        "> ",
        "varCnt <- paste(Set[2], \"count\", sep=\".\")",
        "> ",
        "",
        "> ",
        "# parse out the single line, multiple token input",
        "> ",
        "# note parameter to parseMetricTokens is the column name,  When called this is actually the value",
        "> ",
        "df.2 = df %>% rowwise() %>% mutate(!!varLev := parseMetricTokens(CDA)$level)",
        "[1] \"index: 3\"\n[1] \"index: 3\"\n",
        "> ",
        "df.3 = df.2 %>% rowwise() %>% mutate(!!varCnt := parseMetricTokens(CDA)$count)",
        "[1] \"index: 3\"\n[1] \"index: 3\"\n",
        "Warning messages:\n",
        "1: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " Unequal factor levels: coercing to character\n",
        "2: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "3: ",
        "In mutate_impl(.data, dots) :",
        "\n ",
        " binding character and factor vector, coercing into character vector\n",
        "> ",
        "cda.df = df.3 %>% mutate_at(vars(matches(\"count\")),funs(as.numeric))",
        "> ",
        "rm(df, df.2, df.3)",
        "> ",
        "printDF(cda.df)",
        "# A tibble: 2 x 4\n  StrikeID         CDA CDA.level CDA.count\n     <int>       <chr>    <fctr>     <dbl>\n1    45918 building(3)  building         3\n2    45920 building(1)  building         1\n",
        "> ",
        "dfList = list(phy.df, conf.df, mea.df, cda.df)",
        "> ",
        "analysis.df = left_join(phy.df, conf.df, by=\"StrikeID\") %>%",
        "+ ",
        "              left_join(., mea.df, by=\"StrikeID\") %>%",
        "+ ",
        "                left_join(., cda.df, by=\"StrikeID\")",
        "> ",
        "str(analysis.df)",
        "Classes ‘rowwise_df’, ‘tbl_df’, ‘tbl’ and 'data.frame':\t10 obs. of  13 variables:\n $ StrikeID        : int  45917 45917 45917 45917 45918 45919 45919 45919 45919 45920\n $ Physical        : chr  \"none(1)\" \"none(1)\" \"destroyed(2)\" \"destroyed(2)\" ...\n $ Physical.level  : chr  \"none\" \"none\" \"destroyed\" \"destroyed\" ...\n $ Physical.count  : num  1 1 2 2 1 1 1 2 2 1\n $ Confidence      : chr  \"possible(1)\" \"confident(2)\" \"possible(1)\" \"confident(2)\" ...\n $ Confidence.level: chr  \"possible\" \"confident\" \"possible\" \"confident\"",
        " ...\n $ Confidence.count: num  1 2 1 2 1 1 2 1 2 1\n $ MEA             : chr  \"no high order impact(1)\" \"no high order impact(1)\" \"no high order impact(1)\" \"no high order impact(1)\" ...\n $ MEA.level       : chr  \"no high order impact\" \"no high order impact\" \"no high order impact\" \"no high order impact\" ...\n $ MEA.count       : num  1 1 1 1 NA 5 5 5 5 NA\n $ CDA             : chr  NA NA NA NA ...\n $ CDA.level       : Factor w/ 1 level \"building\": NA NA NA NA 1 NA NA NA NA 1\n $ CDA.count       : num  NA NA NA NA 3 NA NA NA NA 1",
        "\n",
        "> ",
        "printDF(analysis.df)",
        "# A tibble: 6 x 13\n  StrikeID        Physical Physical.level Physical.count   Confidence\n     <int>           <chr>          <chr>          <dbl>        <chr>\n1    45917         none(1)           none              1  possible(1)\n2    45917         none(1)           none              1 confident(2)\n3    45917    destroyed(2)      destroyed              2  possible(1)\n4    45917    destroyed(2)      destroyed              2 confident(2)\n5    45918       destroyed      destroyed              1    confident\n6    45919 light damage(1)   light damage              1  probable(1)\n",
        "# ... with 8 more variables: Confidence.level <chr>,\n#   Confidence.count <dbl>, MEA <chr>, MEA.level <chr>, MEA.count <dbl>,\n#   CDA <chr>, CDA.level <fctr>, CDA.count <dbl>\n",
        "> ",
        "# keep a local copy just in case the internet is down",
        "> ",
        "write.csv(analysis.df, file = paste0(projectDataSet,\"analysis.csv\"))"
    ],
    "type" : [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1
    ]
}